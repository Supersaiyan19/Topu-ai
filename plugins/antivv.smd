const { smd, bot_ } = require("../lib");
const fs = require("fs");

// Command to enable or disable the AntiViewOnce feature
smd(
  {
    cmdname: "antiviewonce",
    alias: ["antivv"],
    desc: "Turn On/Off auto ViewOnce Downloader",
    fromMe: true,
    type: "user",
    use: "<on/off>",
    filename: __filename,
  },
  async (context, message) => {
    try {
      // Retrieve or create bot settings
      let botSettings = await bot_.findOne({ id: "bot_" + context.user });
      if (!botSettings) {
        botSettings = await bot_.new({
          id: "bot_" + context.user,
          antiviewonce: "false",
        });
      }

      let command = (message || "").toLowerCase().trim();
      if (["on", "enable", "act"].includes(command)) {
        if (botSettings.antiviewonce === "true") {
          return await context.reply("*AntiViewOnce is already enabled!*");
        }
        await bot_.updateOne({ id: "bot_" + context.user }, { antiviewonce: "true" });
        return await context.reply("*AntiViewOnce successfully enabled!*");
      } else if (["off", "disable", "deact"].includes(command)) {
        if (botSettings.antiviewonce === "false") {
          return await context.reply("*AntiViewOnce is already disabled!*");
        }
        await bot_.updateOne({ id: "bot_" + context.user }, { antiviewonce: "false" });
        return await context.reply("*AntiViewOnce successfully disabled!*");
      } else {
        return await context.reply("*Usage: Use 'on' or 'off' to enable/disable AntiViewOnce!*");
      }
    } catch (error) {
      console.error("Error in AntiViewOnce command: ", error);
      if (context.reply) {
        await context.reply("*An error occurred while processing your request.*");
      }
    }
  }
);

// Handler for ViewOnce messages
smd(
  {
    on: "viewonce",
  },
  async (context, message) => {
    try {
      // Retrieve bot settings
      let botSettings = await bot_.findOne({ id: "bot_" + context.user });
      if (!botSettings || botSettings.antiviewonce !== "true") return;

      // Check for ViewOnce media
      if (!context.msg.message?.media) {
        throw new Error("No media found in the message.");
      }

      // Download the ViewOnce media
      let mediaPath = await context.bot.downloadAndSaveMediaMessage(context.msg);

      // Extract sender username from quoted message if available
      let senderUsername = context.msg.quotedMsg?.senderName || context.participant || "Unknown";

      // Construct notification message
      let notificationMessage =
        `*[VIEWONCE MESSAGE RETRIEVED]*\n\n` +
        `*SENDER:* ${senderUsername}\n` +
        `*TIME:* ${new Date().toLocaleTimeString()}\n` +
        `*CHAT:* ${context.chatId || "Unknown Chat"}\n` +
        `*MESSAGE:* ${context.body || "No message content"}\n`;

      // Send the retrieved media
      await context.bot.sendMessage(context.user, {
        [context.mtype2?.split("Message")[0]]: { url: mediaPath },
        caption: notificationMessage,
      });

      // Clean up downloaded file
      fs.unlinkSync(mediaPath);
    } catch (error) {
      console.error("Error in ViewOnce handler: ", error);
      if (context.reply) {
        await context.reply("*An error occurred while retrieving the ViewOnce message.*");
      }
    }
  }
);
